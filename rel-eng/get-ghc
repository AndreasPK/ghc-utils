#!/usr/bin/env python3

import subprocess
from subprocess import check_call, check_output, Popen, PIPE
import argparse
import os

architectures = {
    'amd64': 'x86_64',
    'i386': 'i386',
    'x32': 'i386',
}
distributions = { 'deb7', 'centos65' }

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--dest', type=str, default='/opt/ghc', help='root destination directory')
parser.add_argument('-v', '--version', required=True, type=str, help='GHC release to fetch')
parser.add_argument('-a', '--arch', choices=architectures.keys(), help='current architecture (can typically be detected)')
parser.add_argument('-D', '--dist', choices=distributions, help='current distribution (can typically be detected)')
opts = parser.parse_args()

def detect_arch():
    out = check_output(['file', '/bin/bash'])
    kind = str(out).split(':')[1].strip()
    if kind.startswith('ELF 32-bit'):
        return 'i386'
    elif kind.startswith('ELF 64-bit'):
        return 'x86_64'
arch = architectures.get(opts.arch)
if arch is None:
    arch = detect_arch()

def detect_dist():

    a = open('/etc/issue').read()
    if a.startswith('Ubuntu'):
        return 'deb7'
    if a.startswith('Debian'):
        if os.path.isfile('/etc/debian_version'):
            v = open('/etc/debian_version').read()
            if v.startswith('7.'):
                return 'deb7'
            elif v.startswith('8.'):
                return 'deb8'
            else:
                print('Unknown Debian version: %s' % v)
                return None
    if a.startswith('CentOS'):
        return 'centos65'

dist = opts.dist
if dist is None:
    dist = detect_dist()

if opts.version < '8.':
    flavor="{arch}-unknown-linux-{dist}".format(arch=arch, dist=dist)
else:
    flavor="{arch}-{dist}-linux".format(arch=arch, dist=dist)

dest = os.path.join(opts.dest, opts.version)
check_call(['sudo', 'mkdir', '-p', opts.dest])
user = check_output(['whoami']).strip()
check_call(['sudo', 'chown', user, opts.dest])

url = "https://www.haskell.org/ghc/dist/{ver}/ghc-{ver}-{flavor}.tar.xz".format(ver=opts.version, flavor=flavor)
print('Getting GHC binaries from %s' % url)

download = Popen(['curl', '-L', url], stdout=subprocess.PIPE)
untar = Popen(['tar', '-Jx'], stdin=download.stdout)
if untar.wait() != 0 or download.wait() != 0:
    print('Error: Failed to extract')
    exit(1)

os.chdir('ghc-'+opts.version)
check_call(['./configure', '--prefix={dest}'.format(dest=dest)])
check_call(['make', 'install'])

with open(os.path.join(dest, 'env.sh'), 'w') as f:
    f.write("""PATH={dest}/bin:$PATH
LD_LIBRARY_PATH={dest}/lib:$LD_LIBRARY_PATH
echo "Using GHC {ver}"
""".format(dest=dest, ver=opts.version))

