#!/bin/bash

if [ $# != 1 ]; then
    echo "Usage: $0 [COMMIT-RANGE]"
    exit 1
fi

commits=$(git rev-list --reverse $1)

log="validate-all.log"
if [ -f $log ]; then
    mv $log $log.old
ffi

echo "Validating $(echo "$commits" | wc -l) commits $1" | tee $log
echo "Started $(date)" | tee -a $log

function checkout() {
    commit=$1
    git checkout $1 || return $?
    git submodule update || return $?
}

function try() {
    label=$1
    shift
    $@
    ret=$?
    if [ $ret == 0 ]; then
        echo "$label completed successfully" | tee -a $log
    else
        echo "Failed to $label ($ret)" | tee -a $log
    fi
    return $ret
}

function validate() {
    commit=$1
    echo -e "\nTesting $(git show --format=oneline $commit)" | tee -a $log
    echo "Started $(date)"
    git show --no-patch $commit

    try "checkout" checkout $(echo "$commits" | head -n1) || exit 1
    if [ "x$force_clean" == "x1" ]; then
        try "clean validate" ./validate
    else
        if ! try "validate" ./validate --no-clean; then
            try "clean validate" ./validate
        fi
    fi
    return $?
}

function log_validate() {
    commit=$1
    validate $commit | tee validate-$commit.log
    ret=$?
    if [ $ret != 0 ]; then
        tail -n10 validate-$commit.log | sed 's/^/    /' >> $log
    fi
    return $ret
}

# Start with clean validation
if [ "x$no_clean" != "x1" ]; then force_clean=1; fi
commit=$(echo "$commits" | head -n1)
log_validate $commit

for commit in $(echo "$commits" | tail -n+1); do
    force_clean=0 log_validate $commit
done

echo "Finished $(date)" | tee -a $log
echo
echo
cat $log
